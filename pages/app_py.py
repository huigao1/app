# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AcPqlJy5e53eOKlsk74iF-T8hownfR5H
"""

# 📦 Import packages
import streamlit as st
import yfinance as yf
import pandas as pd
import joblib

# 📥 Load Models (Uncomment these after uploading your models into the same folder)
operating_model = joblib.load('operating_margin_model.pkl')
ebitda_model = joblib.load('ebitda_margin_model.pkl')

# 🏷️ Title
st.title("📈 ESG-Based Financial Predictor")

# 🔎 User inputs a ticker
ticker = st.text_input("Enter a stock ticker (example: AAPL, TSLA):")

if ticker:
    try:
        stock = yf.Ticker(ticker)
        sustainability = stock.sustainability

        # Fetch ESG Risk Scores
        environmental_risk_score = sustainability.loc["environmentRiskScore"][0]
        social_risk_score = sustainability.loc["socialRiskScore"][0]
        governance_risk_score = sustainability.loc["governanceRiskScore"][0]

        # Normalize ESG scores (because Yahoo gives risk scores)
        env_score = 1 - (environmental_risk_score / 100)
        soc_score = 1 - (social_risk_score / 100)
        gov_score = 1 - (governance_risk_score / 100)

        st.success(f"✅ ESG Scores Fetched and Normalized")
        st.write(f"Environmental Score: {env_score:.3f}")
        st.write(f"Social Score: {soc_score:.3f}")
        st.write(f"Governance Score: {gov_score:.3f}")

        # 🧮 Sliders for financial variables
        st.subheader("Adjust Financial Ratios (or keep defaults)")

        asset_turnover = st.slider("Asset Turnover", 0.0, 2.0, 0.5, 0.01)
        debt_ratio = st.slider("Debt Ratio", 0.0, 1.0, 0.5, 0.01)
        log_assets = st.slider("Log(Assets)", 4.0, 10.0, 7.0, 0.1)
        dividend_yield = st.slider("Dividend Yield", 0.0, 0.1, 0.02, 0.005)

        # 📄 Create input DataFrame
        input_data = pd.DataFrame([{
            "ESG_Environmental_Score": env_score,
            "ESG_Social_Score": soc_score,
            "ESG_Governance_Score": gov_score,
            "Asset_Turnover": asset_turnover,
            "Debt_Ratio": debt_ratio,
            "Log_Assets": log_assets,
            "Dividend_Yield": dividend_yield
        }])

        # 🚀 Prediction Button
        if st.button("Predict Margins"):
            st.warning("🔧 Models not loaded yet. Upload operating_margin_model.pkl and ebitda_margin_model.pkl first!")

            # Uncomment these lines after model upload:
            # op_margin = operating_model.predict(input_data)[0]
            # ebitda_margin = ebitda_model.predict(input_data)[0]

            # st.success(f"Predicted Operating Margin: {op_margin:.2f}%")
            # st.success(f"Predicted EBITDA Margin: {ebitda_margin:.2f}%")

    except Exception as e:
        st.error(f"Error fetching ESG data or financial data: {e}")

# 🧹 Footer
st.caption("Built for BA870 - ESG Financial Analysis Project 🚀")
